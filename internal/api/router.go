package apiimport (	"github.com/go-chi/chi/v5"	"github.com/go-chi/chi/v5/middleware"	"go-fitness/internal/api/http/handler"	md "go-fitness/internal/api/http/middleware"	"log/slog"	"net/http"	"time")func NewRouter(	log *slog.Logger,	handlers *handler.Handlers,	md *md.Middleware,) *chi.Mux {	r := chi.NewRouter()	r.Use(middleware.RequestID)	r.Use(middleware.RealIP)	r.Use(middleware.Recoverer)	r.Use(middleware.URLFormat)	r.Use(middleware.Timeout(10 * time.Minute))	r.Use(cors())	r.Get("/health", func(w http.ResponseWriter, r *http.Request) {		w.WriteHeader(http.StatusOK)		_, _ = w.Write([]byte("OK"))		return	})	r.Route("/api/v1/ms", func(r chi.Router) {		r.Route("/videos", func(r chi.Router) {			r.Group(func(r chi.Router) {				r.Use(md.AdminAuthMiddleware.New())				r.Delete("/{uuid}/full-delete", handlers.Video.DeleteVideo())				r.Post("/upload", handlers.Video.ProcessUpload())				r.Get("/{uuid}", handlers.Video.GetVideo())				r.Get("/{uuid}/{resolution}", handlers.Video.GetVideo())				//r.Put("/{uuid}/update", handlers.Video.UpdateVideoInfo())				//r.Get("/list", handlers.Video.GetVideos())				//r.Delete("/{uuid}/soft-delete", handlers.Video.SoftDeleteVideo())			})		})		r.Route("/client/videos", func(r chi.Router) {			r.Group(func(r chi.Router) {				r.Use(md.ClientAuthMiddleware.New())				r.Get("/{uuid}", handlers.Video.GetVideo())				r.Get("/{uuid}/{resolution}", handlers.Video.GetVideo())				/*r.Post("/{uuid}/set-time", handlers.Video.SaveVideoPosition())				r.Get("/{uuid}/get-time", handlers.Video.GetVideoPosition())*/				//r.Get("/list", handlers.Video.GetVideosWithPositions())			})		})	})	return r}func cors() func(next http.Handler) http.Handler {	return func(next http.Handler) http.Handler {		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {			if r.Method == "OPTIONS" {				w.Header().Set("Access-Control-Allow-Origin", "*")				w.Header().Set("Access-Control-Allow-Methods", "GET,POST,PUT,PATCH,DELETE,OPTIONS")				w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")				w.WriteHeader(http.StatusOK)				return			}			w.Header().Set("Access-Control-Allow-Methods", "GET,POST,PUT,PATCH,DELETE,OPTIONS")			w.Header().Set("Access-Control-Allow-Origin", "*")			next.ServeHTTP(w, r)		})	}}